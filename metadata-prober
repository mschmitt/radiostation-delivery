#!/usr/bin/env python3
import argparse
import subprocess
import json
import os
import time
from icecream import ic

# Autoflush all outputs https://stackoverflow.com/a/35467658
import functools
print = functools.partial(print, flush=True)

parser = argparse.ArgumentParser(description='Periodically probe an icecast stream for our local metadata object.')
parser.add_argument('-u', '--url', help='stream url', required=True)
parser.add_argument('-r', '--recent', help='Where to write the recent playlist', required=True)
parser.add_argument('-l', '--logdir', help='Where to write the playlist logs', required=True)
args = parser.parse_args()

# Wrapper for ffprobe
def ffprobe_json():
	try:
		out = subprocess.check_output(['ffprobe', '-v', 'quiet', '-print_format', 'json', '-show_format', '-show_streams', args.url], text=True)
	except subprocess.CalledProcessError as e:
		print("Unclean exit from ffprobe.")
		print(e)
		raise Exception("Unclean exit from ffprobe")
	return(out)

# Drill down to our metadata object in metadata returned by ffprobe
def comment_json(outer_json):
	try:
		return json.loads(outer_json['streams'][0]['tags']['comment'])
	except Exception as e:
		print("malformed data, can't extract comment")
		print(e)
		raise Exception("malformed data, can't extract comment")

# Wrapper for writing to disk only if data has changed
def write_json_onchange(filename, data):
	todisk = json.dumps(data, sort_keys=True, indent=2, ensure_ascii=False)
	try:
		with open(filename, 'r') as fh:
			ondisk = fh.read();
	except Exception as e:
		print(f"Couldn't read from {filename} (proceeding): {e}")
		ondisk = ''
	if (todisk == ondisk):
		return 1
	try:
		with open(filename, 'w') as fh:
			fh.write(todisk);
	except Exception as e:
		print(f"Couldn't write to {filename}: {e}")
		return 0
	return 1

while True:
	time.sleep(10)
	# Probe metadata from Stream
	try:
		outer_json = json.loads(ffprobe_json())
		inner_json = comment_json(outer_json)
	except:
		print("Ignoring error from ffprobe or ffprobe output")
		continue
	# Update the list of recently played titles
	try:
		with open(args.recent, 'r') as recent_fh:
			recent = json.load(recent_fh)
			logged_metadata = recent[-1]['metadata']
	except Exception as e:
		print("Couldn't load recently played tracks, starting with empty list.")
		print(e)
		logged_metadata = {}
		recent = list();
	if inner_json != logged_metadata:
		recent.append({'seen': {'timestamp': int(time.time()), 'localtime': time.ctime()}, 'metadata': inner_json})
		try:
			with open(f"{args.logdir}/playlist.{time.strftime('%Y-%m')}.txt", "a") as log_fh:
				log_json = json.dumps({ time.strftime('%Y-%m-%d %H:%M:%S %Z'): {'artist': inner_json['artist'], 'title': inner_json['title'], 'filename': inner_json['filename'], 'license': inner_json['local_license_tag']}})
				log_fh.write(f"{log_json}\n")
		except Exception as e:
			print("Couldn't append to playlist log, ignoring error.")
			print(e)
	# Discard all but 10 newest elements
	recent = recent[-10:]
	try:
		write_json_onchange(args.recent, recent)
		logged_metadata = inner_json
	except Exception as e:
		print("Couldn't save recently played tracks, ignoring error.")
		print(e)
